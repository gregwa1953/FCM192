#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 7.6
#  in conjunction with Tcl version 8.6
#    Apr 07, 2023 11:41:45 AM CDT  platform: Linux

import sys

import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *

from tkinter import font
import tkinter.messagebox as messagebox
from tkinter.filedialog import (
    askdirectory,
    askopenfilename,
    asksaveasfile,
    asksaveasfilename,
)

import TextWidget

_debug = True  # False to eliminate debug printing from callback functions.
location = TextWidget._location


def main(*args):
    """Main entry point for the application."""
    global root
    root = tk.Tk()
    root.protocol("WM_DELETE_WINDOW", root.destroy)
    # Creates a toplevel widget.
    global _top1, _w1
    _top1 = root
    _w1 = TextWidget.Main(_top1)
    startup()
    root.mainloop()


def startup():
    global currentPosition, currentSelection, currentInsert
    _w1.Scrolledtext1.bind("<KeyRelease>", on_stKeypress)
    _w1.Scrolledtext1.bind("<ButtonRelease-1>", on_stMouse)
    _w1.Scrolledtext1.bind("<Button-3>", _w1.popup1)
    _w1.CurrentLocation.set("")
    _w1.CurrentSelection.set("")
    _w1.Scrolledtext1.focus_set()
    create_tags()
    currentPosition = None
    currentSelection = None
    global imagelist
    imagelist = []


def on_stKeypress(e):
    global currentPosition, currentSelection, currentInsert
    currentPosition = _w1.Scrolledtext1.index(INSERT)
    # print(currentPosition)
    cp = str(currentPosition)
    x = cp[: cp.find(".")]
    y = cp[cp.find(".") + 1 :]
    _w1.CurrentLocation.set(f" Line: {x} Col: {y}")
    ranges = _w1.Scrolledtext1.tag_ranges(SEL)
    if len(ranges) > 0:
        # print(f"Selection: {ranges[0]} - {ranges[1]}")
        _w1.CurrentSelection.set(f"Selection: {ranges[0]} , {ranges[1]}")
        currentSelection = ranges
    else:
        _w1.CurrentSelection.set("")
    # print(f"CurrentIndex: {currentInsert}")


def on_stMouse(e):
    global currentPosition, currentSelection, currentInsert
    currentPosition = _w1.Scrolledtext1.index(INSERT)
    # print(currentPosition)
    cp = str(currentPosition)
    x = cp[: cp.find(".")]
    y = cp[cp.find(".") + 1 :]
    _w1.CurrentLocation.set(f" Line: {x} Col: {y}")
    ranges = _w1.Scrolledtext1.tag_ranges(SEL)
    if len(ranges) > 0:
        # print(f"Selection: {ranges[0]} - {ranges[1]}")
        _w1.CurrentSelection.set(f"Selection: {ranges[0]} , {ranges[1]}")
        currentSelection = ranges
    else:
        _w1.CurrentSelection.set("")
    currentInsert = _w1.Scrolledtext1.index(INSERT)
    # print(f"CurrentIndex: {currentInsert}")


def on_btnExit(*args):
    if _debug:
        print("TextWidget_support.on_btnExit")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    sys.exit()


def on_btnLoadFile(*args):
    if _debug:
        print("TextWidget_support.on_btnLoadFile")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    global fontBodyNormal
    filename = askopenfilename(
        initialdir=location,
        title="Select A File",
        parent=_top1,
        filetypes=(
            ("text files", "*.txt"),
            ("All Files", "*.*"),
        ),
    )
    if filename != ():
        if filename != "":
            # Clear the ScrolledText widget
            _w1.Scrolledtext1.delete("1.0", END)
            lines = read_file(filename)
            _w1.Scrolledtext1.insert(END, lines, fontBodyNormal)
    _w1.Scrolledtext1.mark_set(
        INSERT,
        "1.0",
    )
    _w1.Scrolledtext1.focus_set()


def read_file(filename):
    # ======================================================
    # function read_file()
    # ======================================================
    # Read file, leaving end of lines
    # ======================================================
    with open(filename) as f:
        lines = f.read()
    return lines


def on_popBoldOff(*args):
    if _debug:
        print("TextWidget_support.on_popBoldOff")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    ranges = _w1.Scrolledtext1.tag_ranges(SEL)
    if len(ranges) > 0:
        _w1.Scrolledtext1.tag_remove("bold_on_tag", SEL_FIRST, SEL_LAST)


def on_popBoldOn(*args):
    if _debug:
        print("TextWidget_support.on_popBoldOn")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    ranges = _w1.Scrolledtext1.tag_ranges(SEL)
    if len(ranges) > 0:
        _w1.Scrolledtext1.tag_add("bold_on_tag", SEL_FIRST, SEL_LAST)


def on_popCloseMenu(*args):
    if _debug:
        print("TextWidget_support.on_popCloseMenu")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()


def on_popCopy(*args):
    global currentPosition, currentSelection, currentInsert
    if _debug:
        print("TextWidget_support.on_popCopy")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    # print(f"{currentPosition=} - {currentSelection=} - {currentInsert=}")
    ranges = _w1.Scrolledtext1.tag_ranges(SEL)
    if len(ranges) > 0:
        copyData = _w1.Scrolledtext1.get(SEL_FIRST, SEL_LAST)
        # print(f"Data copied: {copyData}")
        root.clipboard_clear()
        root.clipboard_append(copyData)


def on_popCut(*args):
    global currentPosition, currentSelection, currentInsert
    if _debug:
        print("TextWidget_support.on_popCut")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    # print(f"{currentPosition=} - {currentSelection=} - {currentInsert=}")
    ranges = _w1.Scrolledtext1.tag_ranges(SEL)
    copyData = _w1.Scrolledtext1.get(SEL_FIRST, SEL_LAST)
    # print(f"Data copied: {copyData}")
    root.clipboard_clear()
    root.clipboard_append(copyData)
    _w1.Scrolledtext1.delete(SEL_FIRST, SEL_LAST)


def on_popItalicOff(*args):
    if _debug:
        print("TextWidget_support.on_popItalicOff")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    ranges = _w1.Scrolledtext1.tag_ranges(SEL)
    if len(ranges) > 0:
        _w1.Scrolledtext1.tag_remove("italic_on_tag", SEL_FIRST, SEL_LAST)


def on_popItalicOn(*args):
    if _debug:
        print("TextWidget_support.on_popItalicOn")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    ranges = _w1.Scrolledtext1.tag_ranges(SEL)
    if len(ranges) > 0:
        _w1.Scrolledtext1.tag_add("italic_on_tag", SEL_FIRST, SEL_LAST)


def on_popPaste(*args):
    global currentPosition, currentSelection, currentInsert
    if _debug:
        print("TextWidget_support.on_popPaste")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    # print(f"{currentPosition=} - {currentSelection=} - {currentInsert=}")
    ToPasteData = root.clipboard_get()
    _w1.Scrolledtext1.insert(currentInsert, ToPasteData)


def create_tags():
    global fontBodyNormal, fontBold, fontItalic
    fontBodyNormal = font.Font(
        family={"DejaVu Sans"}, size=11, weight="normal", slant="roman"
    )
    fontBold = font.Font(family={"DejaVu Sans"}, weight="bold")
    fontItalic = font.Font(family={"DejaVu Sans"}, slant="italic")
    fontBoldItalic = font.Font(family={"DejaVu Sans"}, weight="bold", slant="italic")
    _w1.Scrolledtext1.tag_config("bold_on_tag", font=fontBold)
    _w1.Scrolledtext1.tag_config("italic_on_tag", font=fontItalic)
    _w1.Scrolledtext1.tag_config("bold_italic_tag", font=fontBoldItalic)
    _w1.Scrolledtext1.tag_config("red", foreground="firebrick3")
    _w1.Scrolledtext1.tag_config("blue", foreground="blue2")
    _w1.Scrolledtext1.tag_config("green", foreground="darkgreen")
    _w1.Scrolledtext1.tag_config("black", foreground="black")


def on_popBoldItalicOff(*args):
    if _debug:
        print("TextWidget_support.on_popBoldItalicOff")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    ranges = _w1.Scrolledtext1.tag_ranges(SEL)
    if len(ranges) > 0:
        _w1.Scrolledtext1.tag_remove("bold_italic_tag", SEL_FIRST, SEL_LAST)


def on_popBoldItalicOn(*args):
    if _debug:
        print("TextWidget_support.on_popBoldItalicOn")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    global currentPosition, currentSelection, currentInsert
    ranges = _w1.Scrolledtext1.tag_ranges(SEL)
    if len(ranges) > 0:
        _w1.Scrolledtext1.tag_add("bold_italic_tag", SEL_FIRST, SEL_LAST)


def on_popColorBlack(*args):
    if _debug:
        print("TextWidget_support.on_popColorBlack")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    ranges = _w1.Scrolledtext1.tag_ranges(SEL)
    if len(ranges) > 0:
        _w1.Scrolledtext1.tag_add("black", SEL_FIRST, SEL_LAST)


def on_popColorBlue(*args):
    if _debug:
        print("TextWidget_support.on_popColorBlue")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    ranges = _w1.Scrolledtext1.tag_ranges(SEL)
    if len(ranges) > 0:
        _w1.Scrolledtext1.tag_add("blue", SEL_FIRST, SEL_LAST)


def on_popColorGreen(*args):
    if _debug:
        print("TextWidget_support.on_popColorGreen")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    ranges = _w1.Scrolledtext1.tag_ranges(SEL)
    if len(ranges) > 0:
        _w1.Scrolledtext1.tag_add("green", SEL_FIRST, SEL_LAST)


def on_popColorRed(*args):
    if _debug:
        print("TextWidget_support.on_popColorRed")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    ranges = _w1.Scrolledtext1.tag_ranges(SEL)
    if len(ranges) > 0:
        _w1.Scrolledtext1.tag_add("red", SEL_FIRST, SEL_LAST)


def on_popRemoveBlue(*args):
    if _debug:
        print("TextWidget_support.on_popRemoveBlue")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    ranges = _w1.Scrolledtext1.tag_ranges(SEL)
    if len(ranges) > 0:
        _w1.Scrolledtext1.tag_remove("blue", SEL_FIRST, SEL_LAST)


def on_popRemoveGreen(*args):
    if _debug:
        print("TextWidget_support.on_popRemoveGreen")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    ranges = _w1.Scrolledtext1.tag_ranges(SEL)
    if len(ranges) > 0:
        _w1.Scrolledtext1.tag_remove("green", SEL_FIRST, SEL_LAST)


def on_popRemoveRed(*args):
    if _debug:
        print("TextWidget_support.on_popRemoveRed")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    ranges = _w1.Scrolledtext1.tag_ranges(SEL)
    if len(ranges) > 0:
        _w1.Scrolledtext1.tag_remove("red", SEL_FIRST, SEL_LAST)


def on_btnGoToTop(*args):
    if _debug:
        print("TextWidget_support.on_btnGoToTop")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    _w1.Scrolledtext1.yview("1.0")


def on_btnGotoBottom(*args):
    if _debug:
        print("TextWidget_support.on_btnGotoBottom")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    _w1.Scrolledtext1.yview(END)


def on_btnInsertImage(*args):
    global imagelist
    if _debug:
        print("TextWidget_support.on_btnInsertImage")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    filename = askopenfilename(
        initialdir=location,
        title="Select A File",
        parent=_top1,
        filetypes=(
            ("png Files", "*.png"),
            ("gif Files", "*.gif"),
        ),
    )

    if filename != ():
        if filename != "":
            tmp0 = tk.PhotoImage(file=filename)
            imagename = filename[filename.rfind("/") + 1 : filename.rfind(".")]
            # print(imagename)
            imagelist.append(tmp0)
            _w1.Scrolledtext1.image_create(
                INSERT, image=imagelist[len(imagelist) - 1], name=imagename
            )


if __name__ == "__main__":
    TextWidget.start_up()

#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.6
#  in conjunction with Tcl version 8.6
#    Apr 07, 2023 02:53:11 PM CDT  platform: Linux

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import os.path

_script = sys.argv[0]
_location = os.path.dirname(_script)

import TextWidget_support

_bgcolor = '#d9d9d9'  # X11 color: 'gray85'
_fgcolor = '#000000'  # X11 color: 'black'
_compcolor = 'gray40' # X11 color: #666666
_ana1color = '#c3c3c3' # Closest X11 color: 'gray76'
_ana2color = 'beige' # X11 color: #f5f5dc
_tabfg1 = 'black' 
_tabfg2 = 'black' 
_tabbg1 = 'grey75' 
_tabbg2 = 'grey89' 
_bgmode = 'light' 

_style_code_ran = 0
def _style_code():
    global _style_code_ran
    if _style_code_ran:
       return
    style = ttk.Style()
    if sys.platform == "win32":
       style.theme_use('winnative')
    style.configure('.',background=_bgcolor)
    style.configure('.',foreground=_fgcolor)
    style.configure('.',font='-family {DejaVu Sans} -size 10')
    style.map('.',background =
       [('selected', _compcolor), ('active',_ana2color)])
    if _bgmode == 'dark':
       style.map('.',foreground =
         [('selected', 'white'), ('active','white')])
    else:
       style.map('.',foreground =
         [('selected', 'black'), ('active','black')])
    style.configure('Vertical.TScrollbar',  background=_bgcolor,
        arrowcolor= _fgcolor)
    style.configure('Horizontal.TScrollbar',  background=_bgcolor,
        arrowcolor= _fgcolor)
    _style_code_ran = 1

class Main:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("723x506+715+350")
        top.minsize(1, 1)
        top.maxsize(2545, 1410)
        top.resizable(0,  0)
        top.title("Text Widget Demo")
        top.configure(background="#919191")
        top.configure(highlightcolor="black")

        self.top = top
        self.CurrentLocation = tk.StringVar()
        self.CurrentSelection = tk.StringVar()

        self.Frame1 = tk.Frame(self.top)
        self.Frame1.place(x=4, y=4, height=435, width=555)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")
        _style_code()
        self.Scrolledtext1 = ScrolledText(self.Frame1)
        self.Scrolledtext1.place(x=0, y=0, height=435, width=555)
        self.Scrolledtext1.configure(background="white")
        self.Scrolledtext1.configure(exportselection="0")
        self.Scrolledtext1.configure(font="TkTextFont")
        self.Scrolledtext1.configure(insertborderwidth="3")
        self.Scrolledtext1.configure(selectbackground="#c4c4c4")
        self.Scrolledtext1.configure(wrap="word")
        self.btnExit = tk.Button(self.top)
        self.btnExit.place(x=581, y=30, height=33, width=125)
        self.btnExit.configure(activebackground="beige")
        self.btnExit.configure(background="#919191")
        self.btnExit.configure(borderwidth="2")
        self.btnExit.configure(command=TextWidget_support.on_btnExit)
        self.btnExit.configure(compound='left')
        self.btnExit.configure(font="-family {DejaVu Sans} -size 10")
        self.btnExit.configure(text='''Exit''')
        self.Frame2 = tk.Frame(self.top)
        self.Frame2.place(x=4, y=445, height=55, width=715)
        self.Frame2.configure(relief='sunken')
        self.Frame2.configure(borderwidth="2")
        self.Frame2.configure(relief="sunken")
        self.Frame2.configure(background="#919191")
        self.Label1 = tk.Label(self.Frame2)
        self.Label1.place(x=4, y=4, height=45, width=196)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(background="#a1a1a1")
        self.Label1.configure(compound='left')
        self.Label1.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Label1.configure(relief="sunken")
        self.Label1.configure(text='''Label''')
        self.Label1.configure(textvariable=self.CurrentLocation)
        self.CurrentLocation.set('''Label''')
        self.Label2 = tk.Label(self.Frame2)
        self.Label2.place(x=203, y=4, height=45, width=246)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(background="#a1a1a1")
        self.Label2.configure(compound='left')
        self.Label2.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Label2.configure(relief="sunken")
        self.Label2.configure(text='''Label''')
        self.Label2.configure(textvariable=self.CurrentSelection)
        self.CurrentSelection.set('''Label''')
        self.btnLoadFile = tk.Button(self.top)
        self.btnLoadFile.place(x=581, y=80, height=33, width=123)
        self.btnLoadFile.configure(activebackground="beige")
        self.btnLoadFile.configure(background="#919191")
        self.btnLoadFile.configure(borderwidth="2")
        self.btnLoadFile.configure(command=TextWidget_support.on_btnLoadFile)
        self.btnLoadFile.configure(compound='left')
        self.btnLoadFile.configure(font="-family {DejaVu Sans} -size 10")
        self.btnLoadFile.configure(text='''Load FIle''')
        self.btnGoToTop = tk.Button(self.top)
        self.btnGoToTop.place(x=581, y=130, height=33, width=123)
        self.btnGoToTop.configure(activebackground="beige")
        self.btnGoToTop.configure(background="#919191")
        self.btnGoToTop.configure(borderwidth="2")
        self.btnGoToTop.configure(command=TextWidget_support.on_btnGoToTop)
        self.btnGoToTop.configure(compound='left')
        self.btnGoToTop.configure(font="-family {DejaVu Sans} -size 10")
        self.btnGoToTop.configure(text='''Go To Top''')
        self.btnGoToBottom = tk.Button(self.top)
        self.btnGoToBottom.place(x=581, y=180, height=33, width=123)
        self.btnGoToBottom.configure(activebackground="beige")
        self.btnGoToBottom.configure(background="#919191")
        self.btnGoToBottom.configure(borderwidth="2")
        self.btnGoToBottom.configure(command=TextWidget_support.on_btnGotoBottom)
        self.btnGoToBottom.configure(compound='left')
        self.btnGoToBottom.configure(font="-family {DejaVu Sans} -size 10")
        self.btnGoToBottom.configure(text='''Go To Bottom''')
        self.btnInsertImage = tk.Button(self.top)
        self.btnInsertImage.place(x=581, y=230, height=33, width=123)
        self.btnInsertImage.configure(activebackground="beige")
        self.btnInsertImage.configure(background="#919191")
        self.btnInsertImage.configure(borderwidth="2")
        self.btnInsertImage.configure(command=TextWidget_support.on_btnInsertImage)
        self.btnInsertImage.configure(compound='left')
        self.btnInsertImage.configure(font="-family {DejaVu Sans} -size 10")
        self.btnInsertImage.configure(text='''Insert Image''')

    def popup1(self, event, *args, **kwargs):
        self.Popupmenu1 = tk.Menu(self.top, tearoff=0)
        self.Popupmenu1.configure(background=_bgcolor)
        self.Popupmenu1.configure(foreground=_fgcolor)
        self.Popupmenu1.configure(activebackground=_ana2color)
        self.Popupmenu1.configure(activeforeground='black')
        self.Popupmenu1.configure(font="TkMenuFont")
        self.Popupmenu1.add_command(command=TextWidget_support.on_popCopy
                ,compound='left', label='Copy')
        self.Popupmenu1.add_command(command=TextWidget_support.on_popCut
                ,compound='left', label='Cut')
        self.Popupmenu1.add_command(command=TextWidget_support.on_popPaste
                ,compound='left', label='Paste')
        self.Popupmenu1.add_separator()
        self.sub_menu = tk.Menu(self.Popupmenu1, activebackground='beige'
                ,activeforeground='black', tearoff=0)
        self.Popupmenu1.add_cascade(compound='left', label='Bold'
                ,menu=self.sub_menu, )
        self.sub_menu.add_command(command=TextWidget_support.on_popBoldOn
                ,compound='left', label='Bold On')
        self.sub_menu.add_command(command=TextWidget_support.on_popBoldOff
                ,compound='left', label='Bold OFf')
        self.sub_menu1 = tk.Menu(self.Popupmenu1, activebackground='beige'
                ,activeforeground='black', tearoff=0)
        self.Popupmenu1.add_cascade(compound='left', label='Italic'
                ,menu=self.sub_menu1, )
        self.sub_menu1.add_command(command=TextWidget_support.on_popItalicOn
                ,compound='left', label='Italic On')
        self.sub_menu1.add_command(command=TextWidget_support.on_popItalicOff
                ,compound='left', label='Italic Off')
        self.sub_menu12 = tk.Menu(self.Popupmenu1, activebackground='beige'
                ,activeforeground='black', tearoff=0)
        self.Popupmenu1.add_cascade(compound='left', label='Bold AND Italic'
                ,menu=self.sub_menu12, )
        self.sub_menu12.add_command(command=TextWidget_support.on_popBoldItalicOn
                ,compound='left', label='Bold Italic On')
        self.sub_menu12.add_command(command=TextWidget_support.on_popBoldItalicOff
                ,compound='left', label='Bold Italic Off')
        self.Popupmenu1.add_separator()
        self.sub_menu123 = tk.Menu(self.Popupmenu1, activebackground='beige'
                ,activeforeground='black', tearoff=0)
        self.Popupmenu1.add_cascade(compound='left', label='Colored Text'
                ,menu=self.sub_menu123, )
        self.sub_menu123.add_command(command=TextWidget_support.on_popColorRed
                ,compound='left', label='Red')
        self.sub_menu123.add_command(command=TextWidget_support.on_popRemoveRed
                ,compound='left', label='Remove Red')
        self.sub_menu123.add_command(command=TextWidget_support.on_popColorGreen
                ,compound='left', label='Green')
        self.sub_menu123.add_command(command=TextWidget_support.on_popRemoveGreen
                ,compound='left', label='Remove Green')
        self.sub_menu123.add_command(command=TextWidget_support.on_popColorBlue
                ,compound='left', label='Blue')
        self.sub_menu123.add_command(command=TextWidget_support.on_popRemoveBlue
                ,compound='left', label='Remove Blue')
        self.Popupmenu1.add_command(compound='left',label='Close Menu')
        self.Popupmenu1.post(event.x_root, event.y_root)

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')
def start_up():
    TextWidget_support.main()

if __name__ == '__main__':
    TextWidget_support.main()




